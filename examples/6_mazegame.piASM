# a maze game.
# purpose: show some of the possibilities of piASM.

# USED POINTERS: 0, 1, ... , 84

MEM = [
    # note: initial values of up to index 50 are irrelevant since set later / unused, so can hide a little message in them :)
    # first 5: xpos, ypos, userinp, temploopvar, temploopstore
    84,104,97,116,39,
    # next 10: isInvincible, playerchar, spikesDestroyed, numcoins, <padding>
    115,32,103,111,111,100,32,116,104,105,
    # next 5: space for obsfucate function (inp, retval1..4)
    110,107,105,110,103,
    # next 10: space for handlespecial function (x, y, specialchar, <padding>)
    44,32,98,117,116,32,73,32,111,98,
    # next 10: space for move function (dx, dy, nextchar, nextxorchar, retval, <padding>)
    115,102,117,99,97,116,101,100,32,109,
    # next 10: space for print function (strlen, startind, curind, xorkeystartind, xorkeylen, <padding>)
    101,109,111,114,121,32,62,58,41,32,
    # next 288: maze chars (all chars in mem are xored for obsfucation)
    124,35,100,32,3,76,124,113,120,13,124,35,100,32,3,76,124,113,120,13,122,35,100,32,3,76,124,113,120,13,124,4,53,89,14,63,113,124,117,126,119,46,53,83,14,65,113,124,117,0,119,46,105,45,14,65,113,124,117,0,119,94,53,7,5,63,15,124,117,126,119,46,23,83,5,65,113,2,117,11,119,46,105,83,5,76,124,113,120,11,119,46,105,45,82,107,45,124,117,0,9,46,23,45,14,65,113,124,11,0,119,114,23,45,14,65,113,124,11,0,7,114,105,45,14,65,45,86,126,13,122,35,100,38,3,76,124,113,120,13,122,35,100,38,3,76,124,113,126,0,119,80,105,113,14,65,113,124,41,42,43,90,23,45,14,65,113,124,117,0,119,46,105,45,14,65,113,124,5,0,43,46,105,45,14,29,15,2,11,126,43,4,53,45,14,65,113,119,120,13,122,35,98,45,14,63,113,119,120,13,122,35,98,45,112,65,113,32,11,126,9,80,53,7,82,65,15,124,117,0,119,46,17,45,82,63,113,124,117,0,119,46,105,45,14,65,113,124,1,92,9,80,23,83,82,107,122,113,120,13,122,35,100,32,3,76,122,113,120,13,122,35,100,32,3,76,124,113,120,13,122,37,106,46,13,66,45,86,
    # next 2: padding
    0,0,
    # next 40: xor key chars (random vals, different prints have different xor keys)
    110,101,118,101,114,103,111,110,110,97,103,105,118,101,121,111,117,117,112,68,12,67,89,43,70,22,0,87,14,73,13,46,97,81,92,85,32,8,61,34,

    # next 79: prompt chars ("escape the maze! input...")
    34,26,21,4,9,10,85,1,24,2,73,27,4,3,10,84,85,57,9,25,3,17,89,24,90,20,95,20,70,18,69,31,0,7,85,17,71,13,31,23,28,12,1,28,31,9,69,86,14,89,9,26,7,80,6,73,27,4,9,79,30,16,9,75,73,25,23,89,62,85,1,31,71,24,3,12,13,85,85,
    # next 352: map key chars ("KEY: X'=you...")
    101,37,43,56,93,99,85,70,90,76,86,86,83,103,47,76,77,77,66,68,74,85,70,90,76,86,86,83,103,47,76,77,77,66,68,74,85,70,90,76,86,86,83,103,47,76,77,77,66,68,74,124,60,22,26,85,72,80,99,84,72,100,61,17,6,10,19,69,68,79,82,85,87,100,36,14,2,2,14,16,12,18,69,13,0,85,24,31,50,105,79,6,11,19,2,64,124,50,24,3,25,85,77,100,109,1,23,78,14,1,73,81,72,5,68,82,85,88,55,120,0,30,29,65,10,6,0,0,20,10,27,1,89,78,73,23,7,26,65,90,73,81,70,94,79,93,18,31,37,96,79,7,29,65,19,6,86,2,28,27,85,29,21,54,105,70,100,61,17,14,2,19,69,68,79,82,43,87,100,36,6,8,78,24,8,28,86,8,22,25,16,85,31,42,120,0,78,1,15,2,69,86,12,23,28,1,20,30,48,44,11,11,15,21,15,64,124,49,11,10,20,6,5,54,105,79,83,78,70,51,78,86,77,20,0,3,16,80,43,98,27,1,78,8,19,73,2,10,89,27,20,30,21,100,101,27,71,100,49,2,27,5,10,23,79,72,85,87,20,43,79,70,3,14,17,12,86,10,23,27,26,85,4,44,105,2,78,26,14,71,26,6,0,24,4,85,1,31,100,120,7,11,3,72,109,74,85,70,90,76,86,86,83,103,47,76,77,77,66,68,74,85,70,90,76,86,86,83,103,47,76,77,77,66,68,74,85,70,90,76,86,86,83,103,47,76,77,77,66,68,99,124,
    # next 38: "thanks for playing..."
    101,33,29,17,1,30,6,80,9,26,7,80,31,25,20,9,6,27,18,94,79,61,26,0,10,85,28,4,79,2,20,3,79,19,0,30,78,127,
    # next 33: "invalid input"
    38,0,24,0,11,0,11,78,7,15,23,28,27,66,78,17,11,12,14,29,11,65,19,27,22,78,15,6,6,0,1,64,100,
    # next 58: "you died"
    122,11,99,51,42,7,102,28,43,99,40,42,11,42,25,47,105,99,32,68,51,80,35,99,55,121,66,43,0,37,96,38,61,5,102,50,33,120,55,60,89,102,28,49,111,40,121,69,35,8,48,44,55,48,70,35,94,78,
    # next 52: "after greeting... says to you"
    83,106,32,98,101,37,46,46,127,60,78,50,127,110,48,46,44,108,58,67,102,121,116,63,107,59,33,121,95,46,115,32,39,107,59,126,54,69,102,101,97,46,125,105,121,54,11,63,121,117,109,4,
    # next 45: "you open the treasure... inside is:"
    4,16,98,91,65,97,57,104,64,65,122,33,104,14,21,124,44,108,93,20,124,44,45,76,14,118,101,45,71,15,125,32,105,75,65,119,38,120,14,7,103,39,105,20,107,
    # next 181: "the first part of the pw is X"
    107,84,65,20,113,52,52,86,109,29,67,105,97,65,15,54,124,39,79,105,89,2,40,101,75,0,53,124,58,70,40,68,77,60,35,14,41,52,46,48,7,123,29,67,105,125,92,4,34,57,59,84,50,29,86,33,104,14,7,56,46,38,84,40,77,67,59,121,14,14,55,124,33,72,109,29,88,32,125,14,17,48,47,38,87,103,79,70,105,100,93,91,91,15,32,80,59,79,125,58,62,77,52,35,111,10,80,60,8,23,62,61,124,5,14,21,10,67,60,83,118,22,111,75,45,56,111,35,69,87,85,18,30,82,125,82,50,41,39,19,2,31,40,1,96,67,77,113,62,48,84,124,88,80,105,102,75,4,33,124,33,72,105,73,2,32,99,72,14,113,58,58,82,40,81,67,61,104,92,79,91,
    # next 155: "the second part of the pw is X"
    102,69,99,49,78,39,100,32,46,97,60,45,89,0,63,40,48,68,40,73,74,33,44,48,60,72,41,120,100,119,126,40,127,90,65,62,58,117,84,96,88,2,62,101,51,121,91,39,101,115,32,97,59,105,17,65,2,41,39,69,36,29,75,48,43,48,83,116,15,66,95,30,125,22,57,64,5,14,53,10,67,60,83,86,27,110,112,53,26,117,96,51,8,63,29,56,113,15,97,8,10,66,125,73,118,119,126,98,120,10,103,55,33,118,4,107,7,102,12,60,112,117,66,109,73,86,33,126,99,50,78,35,102,32,35,102,40,121,14,8,63,58,58,0,110,82,80,100,96,34,45,78,52,56,10,
    # next 222: "whats the secret number"
    9,14,115,82,102,123,74,40,58,11,15,54,79,41,120,12,50,54,64,40,121,92,102,119,73,41,99,95,102,111,68,51,54,73,51,98,11,50,126,74,50,54,78,62,127,95,102,117,68,52,100,66,34,121,89,102,122,68,41,125,88,102,102,89,35,98,95,63,54,79,35,119,79,42,111,11,52,127,76,46,98,11,40,121,92,104,54,99,41,97,11,36,121,94,50,54,92,35,54,70,39,125,78,102,119,11,34,115,74,42,54,6,102,111,68,51,54,76,47,96,78,102,123,78,102,98,67,35,54,88,35,117,89,35,98,11,40,99,70,36,115,89,106,54,74,40,114,11,15,54,79,35,101,95,52,121,82,102,119,71,42,54,95,46,115,11,53,102,66,45,115,88,102,112,68,52,54,82,41,99,7,102,101,68,51,120,79,102,113,68,41,114,20,100,28,33,17,126,74,50,49,88,102,98,67,35,54,88,35,117,89,35,98,11,40,99,70,36,115,89,121,54,
    # next 96: "wrong secret number"
    107,51,1,19,69,9,4,21,26,25,11,89,18,6,16,5,69,27,0,4,2,86,17,22,65,30,6,3,95,115,67,52,12,19,8,10,65,19,6,86,7,28,65,16,27,25,11,30,77,71,10,25,8,28,65,5,8,21,14,89,13,6,29,19,23,89,91,79,75,124,111,32,14,18,73,26,0,24,23,2,69,86,0,20,17,19,16,91,13,24,15,3,12,18,75,115,
    # next 286: "correct secret number"
    124,49,17,10,85,5,21,54,127,44,24,69,10,14,12,6,80,38,109,32,29,69,13,0,85,12,31,49,54,73,84,50,22,24,89,85,4,44,109,55,86,22,28,12,7,16,4,100,98,54,27,7,28,29,85,6,21,33,97,48,86,17,22,79,23,16,80,54,101,36,30,17,88,79,59,26,7,100,69,99,30,4,15,10,85,28,4,104,44,46,15,69,9,3,20,27,3,100,106,44,4,69,14,0,7,25,20,100,104,44,27,12,23,14,1,28,31,42,44,32,23,11,89,13,16,18,25,42,34,99,55,11,0,24,20,12,92,100,111,44,0,0,11,79,12,26,5,54,44,38,23,23,10,65,87,127,122,5,127,99,15,10,12,79,17,26,80,55,99,111,86,28,22,26,85,29,21,37,126,99,23,69,21,0,0,17,80,102,78,2,56,34,91,79,20,27,20,100,127,54,18,1,28,1,25,12,80,37,96,47,86,17,17,10,85,6,0,45,103,38,5,69,24,29,26,0,30,32,44,58,25,16,89,11,28,6,17,52,124,38,23,23,87,101,44,26,5,100,123,42,5,13,89,10,20,22,24,100,99,55,30,0,11,79,2,16,28,40,44,34,24,1,89,28,20,12,80,35,99,44,18,7,0,10,91,127,
    # next 130: "still here? go win"
    69,32,15,67,71,22,8,26,64,29,2,79,20,27,14,3,11,79,14,1,71,27,15,6,20,79,23,3,6,12,2,80,71,56,2,3,11,67,71,38,71,11,8,79,15,14,17,10,71,0,9,10,71,2,8,29,2,79,19,7,14,1,0,79,19,0,71,28,6,22,93,101,11,6,9,26,31,79,89,81,71,24,14,1,3,0,16,28,70,78,70,79,34,28,23,10,4,6,6,3,11,22,71,63,8,31,70,48,40,60,71,14,9,11,71,46,21,12,15,12,21,14,1,27,71,85,78,101,69,101,
    # next 25: "you find coins"
    94,64,79,22,0,28,1,6,78,85,54,26,26,85,27,20,4,16,79,1,7,16,2,91,101,
    # next 71: "i only talk to poor people"
    71,37,10,23,4,28,73,86,44,69,25,11,9,15,69,17,23,9,14,86,17,10,86,21,10,25,23,69,6,0,10,6,9,0,86,7,16,2,69,44,86,22,0,19,69,28,25,16,69,30,4,19,19,69,6,25,12,11,5,75,69,49,10,10,18,7,28,19,68,71,124,
    # next 141: "you become invincible"
    40,24,69,16,1,3,28,30,39,101,33,48,71,47,98,121,119,126,38,121,71,14,63,125,117,48,25,16,89,11,7,28,30,47,44,42,45,5,102,66,104,50,46,39,104,86,21,113,40,60,4,19,69,0,0,0,85,28,37,98,39,121,68,40,54,97,119,125,57,100,69,4,125,124,44,6,3,69,14,6,25,25,80,38,105,99,43,78,53,99,114,37,107,42,121,75,5,113,116,33,1,19,69,10,31,28,30,21,100,123,42,53,71,102,116,101,119,106,44,126,90,19,62,37,48,13,95,75,89,56,26,7,27,55,44,44,55,72,35,56,10,
    # next 102: "luckily you're invincible"
    10,14,97,60,45,66,0,63,56,48,68,32,56,96,105,108,14,18,33,53,62,69,44,119,108,60,121,14,13,36,63,62,73,108,46,46,48,98,91,70,35,57,117,73,110,33,103,39,110,71,3,61,57,123,0,66,50,121,40,127,75,65,37,52,58,85,103,63,34,105,116,65,20,35,124,60,78,118,62,96,42,100,76,8,61,53,33,89,32,62,125,105,99,65,22,113,59,58,78,101,121,4,
    # next 138: "here's a cyber puzzle"
    56,79,22,12,18,33,126,99,41,94,60,108,108,50,47,105,66,70,65,40,57,10,65,85,60,4,99,127,99,55,68,50,54,115,34,126,44,127,14,9,48,46,29,79,60,85,3,51,105,34,43,5,76,64,105,36,103,61,45,70,21,37,44,10,85,90,90,21,52,101,47,60,91,50,127,99,122,126,37,98,90,18,127,108,73,95,2,16,18,44,99,48,45,74,54,102,46,52,97,36,34,71,15,53,57,1,65,5,29,0,100,109,45,61,11,33,115,116,119,122,33,104,14,18,52,63,11,10,1,85,30,49,97,33,60,89,104,28,
    # next 228: success message
    33,0,21,3,85,17,31,42,105,111,121,82,41,99,32,50,125,42,108,94,4,53,124,33,30,0,89,2,20,15,21,101,6,23,49,74,40,125,115,119,104,38,127,14,17,61,61,44,31,11,30,79,88,85,24,43,124,38,121,66,50,54,119,54,125,105,107,91,15,112,86,29,19,23,28,72,6,85,4,44,105,99,42,94,37,117,101,36,125,105,96,75,18,34,61,50,19,69,0,0,0,82,2,33,44,47,54,68,45,127,110,48,46,47,98,92,91,91,47,32,21,6,28,28,6,14,34,3,96,40,16,99,42,96,100,4,76,51,110,105,88,97,21,29,36,10,35,60,55,25,41,28,66,115,3,115,15,113,90,0,106,39,93,87,35,27,6,60,52,31,27,22,2,18,21,19,53,114,16,108,50,99,98,100,109,46,111,118,10,54,6,56,48,87,27,92,35,12,17,28,94,47,16,108,62,102,98,57,88,125,68,105,51,33,63,102,36,28,27,92,56,18,63,45,103,126,36,33
]

p1 p1 j # don't execute function section straight away

# function declaration section

    P41 # begin stop function
        # print "thanks for playing"
        p38p40s p811p41s p355p43s p4p44s # set params: (38, 811, <>, 355, 4)
        p40 p2 p1 j P40 # call print()
        p13 p1 j # stop
    # end stop function

    P2 # begin print function
        p0 p42 s # set curind to 0
        P5 # loop curind from 0 to strlen
            p41 g p42 g A g # get MEM[startind + curind]
            p44 g p42 g D p44 g M p42 g S p43 g A g # calculate MEM[xorkeystartind + curind%xorkeylen]
            x O # xor then print
            p42 g p1 A p42 s # curind += 1
            p6 p40 g p42 g x p1 x j # if curind == strlen: break
            p5 p1 j # else repeat
        P6 # end loop
        p1 j # return
    # end print function

    P18 # begin move function
        # calculate new xor char
            p10 p1 g p31 g A p32 M p0 g A p30 g A D p10 M # ((y+dy)*width+x+dx) //10 * 10
            p1 g p31 g A p32 M p0 g A p30 g A # (y+dy)*width+dx (subtract prev line to get modulo)
            S p367 A g p33 s # store xor char in nextxorchar
        # store char at new pos in nextchar i.e. MEM[startindex + (y+dy)*width + x+dx]
            p1 g p31 g A p32 M p0 g A p30 g A p50 A g p33 g x p32 s # xor, write actual char to nextchar
        # if trying to move to space or treasure or spike, set char at pos to empty, ypos -= 1, set char at pos to XX
            p17 p32 g p32 x p1 x j # if (char XOR " ") XOR 1, move
            p17 p32 g p84 x p1 x j # if (char XOR "T") XOR 1, move
            p17 p32 g p94 x p1 x j # if (char XOR "^") XOR 1, move
            p16 p1 j # else don't move
        P17 # conditional move
            # set char at pos from X to empty
                # calculate new char with xor
                p10 p1 g p32 M p0 g A D p10 M p1 g p32 M p0 g A S p367 A g p32 x
                p1 g p32 M p0 g A p50 A # calculate pos (startindex + y*width + x)
                s # finally, write char
            p0 g p30 g A p0 s p1 g p31 g A p1 s # xpos += dx, ypos += dy
            # set char at pos from empty to X
                p33 g p88 x # calculate new char with xor
                p1 g p32 M p0 g A p50 A s # same as X -> empty
        P16 # jump here if not moving
        p0 p34 s # retval = 0

        # if nextchar is spike, die unless invincible
        p27 p32 g p94 x p1 x j
        p28 p1 j # else go to P28
        P27 # begin if (if char == spike)
            p78 p5 g p1 x j # if not invincible
            p79 p1 j # else
            P78 # begin if
                # print "you died"
                p58p40s p882p41s p358p43s p7p44s # set params: (58, 882, <>, 358, 7)
                p39 p2 p1 j P39 # call print()
                p41 p1 j # stop()
            P79 # begin else
                # print "luckily you're invincible"
                p102p40s p2344p41s p366p43s p11p44s # set params: (102, 2344, <>, 366, 11)
                p80 p2 p1 j P80 # call print()
                p0 p5 s # isInvincible = false
        P28 # endif

        # (el)if nextchar is exit, return 1
        p29 p32 g p35 x p1 x j
        p30 p1 j # else go to P30
        P29 # begin if
            p1 p34 s #  retval = 1
            p1 j # return
        P30 # endif

        # (el)if nextchar is treasure/person, call handlespecial(targetpos)
        p3 p32 g p84 x p1 x j # check if == T
        p33 p32 g p80 x p1 x j # check if == P
        p19 p1 j # else go to P19
        P3 # begin if (== T)
            # set handlespecial params (x=xpos, y=ypos, specialchar=nextchar)
            p0 g p20 s p1 g p21 s p32 g p22 s
            p32 p31 p1 j P32 # handlespecial()
            p19 p1 j # go to endif
        P33 # begin elif (== P)
            # set handlespecial params (x=xpos+dx, y=ypos+dy, specialchar=nextchar)
            p0 g p30 g A p20 s p1 g p31 g A p21 s p32 g p22 s
            p32 p31 p1 j P32 # handlespecial()
        P19 # endif

        p1 j # return
    # end move function

    P31 # begin handlespecial function (deals with treasure + people )

        # p10 O p20 g o p32 O p21 g o p32 O p22 g O p10 O # print pos
        p34 p22 g p84 x p1 x j # if char is "T", print "you open the..."
        # else print "after greeting..."
            p52p40s p940p41s p362p43s p9p44s # set params: (52, 940, <>, 362, 9)
            p42 p2 p1 j P42 # call print()
            p35 p1 j # go to endif
        P34 # begin if
            p45p40s p992p41s p368p43s p5p44s # set params: (45, 992, <>, 368, 5)
            p43 p2 p1 j P43 # call print()
        P35 # endif

        # (18, 5) : "the first part of the pw is X"
            p45 p21 g p69 M p20 g A p363 x p1 x j # if y*69+x == 363, jump to if
            p46 p1 j # else jump to endif
            P45 # begin if
                p181p40s p1037p41s p369p43s p11p44s # set params: (181, 992, <>, 369, 11)
                p44 p2 p1 j P44 # call print()
                p52 p1 j # don't check other ifs
            P46 # endif
        # (24, 3) : "the second part of the pw is X"
            p47 p21 g p69 M p20 g A p231 x p1 x j # if y*69+x == 231, jump to if
            p48 p1 j # else jump to endif
            P47 # begin if
                p155p40s p1218p41s p359p43s p21p44s # set params: (155, 1218, <>, 359, 21)
                p49 p2 p1 j P49 # call print()
                p52 p1 j # don't check other ifs
            P48 # endif
        # (29, 1) : "road ahead looks blocked. if you give me the secret number though, i can blow up all the spikes for you"
            p50 p21 g p69 M p20 g A p98 x p1 x j # if y*69+x == 98, jump to if
            p51 p1 j # else jump to endif
            P50 # begin if
                p67 p7 g j # if spikes already destroyed, skip
                p72 p8 g p1 x j # if numcoins == 0
                p73 p1 j # else
                P72 # begin if
                    # print "whats the secret number"
                    p222p40s p1373p41s p363p43s p3p44s # set params: (222, 1373, <>, 363, 3)
                    p56 p2 p1 j P56 # call print()
                    i p15 s p54 p53 p1 j P54 # input secret number, pass to obsfucate() and call
                    # correct answer is MEM[(16, ..., 19)] = (856,210207,214313,193156)
                    p55 p16 g p856 x p1 x j # if MEM[16] == 856
                    p57 p1 j # else
                    P55
                        p58 p17 g p210p1000Mp207A x p1 x j # if MEM[17] == 210207
                        p57 p1 j # else
                        P58
                            p59 p18 g p214p1000Mp313A x p1 x j # if MEM[18] == 214313
                            p57 p1 j # else
                            P59
                                p60 p19 g p193p1000Mp156A x p1 x j # if MEM[19] == 193156
                                p57 p1 j # else
                                P60
                                    # success - remove all spikes
                                    # print "correct number"
                                    p286p40s p1691p41s p352p43s p10p44s # set params: (286, 1691, <>, 352, 10)
                                    p62 p2 p1 j P62 # call print()
                                    # loop through maze chars (i.e. index 50 to 338), turn ^ to " "
                                        p50 p3 s # temploopvar = 50
                                        P63 # start loop
                                            # temploopstore = xorchar = MEM[367+(temploopvar-50)%10]
                                            p10 p50 p3 g S D p10 M p50 p3 g S S p367 A g p4 s
                                            p65 p4 g p3 g g x p94 x p1 x j # if char == ^
                                            p66 p1 j # else go to endif
                                            P65 # begin if
                                                p4 g p32 x p3 g s # change cur char to " "
                                            P66 # endif
                                            p3 g p1 A p3 s # temploopvar += 1
                                            p64 p3 g p339 x p1 x j # if temploopvar = 339, break
                                            p63 p1 j # else, loop again
                                        P64 # end loop
                                    p1 p7 s # spikesDestroyed = true
                                    p52 p1 j # don't check other ifs
                    P57
                        # print "wrong answer"
                        p96p40s p1595p41s p349p43s p6p44s # set params: (96, 1595, <>, 349, 6)
                        p61 p2 p1 j P61 # call print()
                        p52 p1 j # don't check other ifs
                P73 # begin else
                    # print "sorry, you need to be poor"
                    p71p40s p2132p41s p341p43s p3p44s # set params: (71, 2132, <>, 341, 3)
                    p74 p2 p1 j P74 # call print()
                    p52 p1 j # don't check other ifs

                P67 # begin "already destroyed" if section
                    # print "already destroyed"
                    p130p40s p1977p41s p345p43s p2p44s # set params: (130, 1977, <>, 345, 2)
                    p68 p2 p1 j P68 # call print()
                    p52 p1 j # don't check other ifs

            P51 # endif
        # (24, 7) : coins (trap, must have no coins to destroy spikes)
            p69 p21 g p69 M p20 g A p507 x p1 x j # if y*69+x == 507, jump to if
            p70 p1 j # else jump to endif
            P69 # begin if
                # print "you found coins"
                p25p40s p2107p41s p355p43s p2p44s # set params: (25, 2107, <>, 355, 2)
                p71 p2 p1 j P71 # call print()
                p15 p8 s # numcoins = 15
                p52 p1 j # don't check other ifs
            P70 # endif
        # (1, 5) : invincibility (works once)
            p75 p21 g p69 M p20 g A p346 x p1 x j # if y*69+x == 346, jump to if
            p76 p1 j # else jump to endif
            P75 # begin if
                # print "you become invincible"
                p141p40s p2203p41s p351p43s p25p44s # set params: (141, 2203, <>, 351, 25)
                p77 p2 p1 j P77 # call print()
                p1 p5 s # isInvincible = true
                p52 p1 j # don't check other ifs
            P76 # endif
        # (1, 1) : cyber puzzle (end is pastebin with secret num)
            p81 p21 g p69 M p20 g A p70 x p1 x j # if y*69+x == 70, jump to if
            p82 p1 j # else jump to endif
            P81 # begin if
                # print puzzle
                p138p40s p2446p41s p354p43s p21p44s # set params: (138, 2446, <>, 354, 21)
                p83 p2 p1 j P83 # call print()
                p52 p1 j # don't check other ifs
            P82 # endif
        P52 # end all ifs
        p1 j # return
    # end handlespecial function

    P53 # begin obsfucate function
        p15 g # push inp
        # push MEM at indexes [401, 823, 876, 995, 430] 
        p20p20Mp1Ag p5p4p2p5p4MMMMp23Ag p876g p5p10p10p10MMSg p1p2p1Ap2Mp5p2AMp2ASp10Mg
        MMMM p15 s # multiply all (result = 2589678) , store in inp
        p15 g p15 g p15 g MM # compute 2589678 cubed
        p987 g p15 g p987 g p15 g xxxxx # xor with inp
        p15 s # store res in inp
        # let (a, b) = (res//13**10, res%13**10)
        # then (retval1, retval2) = (a//13**5, a%13**5) and (retval3, retval4) = (b//13**5, b%13**5)
        p371293p371293M p15 g D p371293p371293M M p15 g S p16 s # store res%13**10 in retval1 (temp)
        p371293 p16 g D p18 s # set retval3
        p18 g p371293M p16 g S p19 s # set retval4
        p371293 p371293p371293M p15 g D D p16 s # set retval1
        p16 g p371293M p371293p371293M p15 g D S p17 s # set retval2
        p1 j # return
    # end obsfucate function

P1 # end function declaration section


# init vars
p8 p0 s p7 p1 s # (xpos, ypos) = (8, 7)
p0 p5 s # isInvincible = 0 (false)
p88 p6 s # playerchar = X
p0 p7 s # spikesDestroyed = 0 (false)
p0 p8 s # numcoins = 0


P0 # begin game loop

    # print board
    p288p40s p50p41s p367p43s p10p44s # set params: (288, 50, <>, 367, 10)
    p4 p2 p1 j P4 # call print()

    P12 # loop back here to not print board

    # print prompt
    p79p40s p380p41s p350p43s p9p44s # set params: (79, 380, <>, 350, 9)
    p8 p2 p1 j P8 # call print()

    I p2 s # get input char

    p9 p2 g p107 x p1 x j # if input==k, jump to P9
    p14 p2 g p81 x p1 x j # if input==Q, jump to P14
    p15 p2 g p119 x p1 x j # if input==w, jump to P15
    p21 p2 g p97 x p1 x j # if input==a, jump to P21
    p23 p2 g p115 x p1 x j # if input==s, jump to P23
    p25 p2 g p100 x p1 x j # if input==d, jump to P25
    p10 p1 j # otherwise jump to else section
    P9 # if input == k section
        # print key
        p352p40s p459p41s p346p43s p15p44s # set params: (352, 459, <>, 346, 15)
        p36 p2 p1 j P36 # call print()
        p12 p1 j # go to P12
    P14 # if input == Q section
        p41 p1 j # stop()
    P15 # if input == w section
        p0 p30 s p-1 p31 s # dx = 0, dy = -1
        p20 p18 p1 j P20 # move()
        p10 O p7 p34 g j # if retval is 1, stop the main game loop (win)
        p0 p1 j # go to loop start
    P21 # if input == a section
        p-1 p30 s p0 p31 s # dx = -1, dy = 0
        p22 p18 p1 j P22 # move()
        p10 O p7 p34 g j # if retval is 1, stop the main game loop (win)
        p0 p1 j # go to loop start
    P23 # if input == s section
        p0 p30 s p1 p31 s # dx = 0, dy = 1
        p24 p18 p1 j P24 # move()
        p10 O p7 p34 g j # if retval is 1, stop the main game loop (win)
        p0 p1 j # go to loop start
    P25 # if input == d section
        p1 p30 s p0 p31 s # dx = 1, dy = 0
        p26 p18 p1 j P26 # move()
        p10 O p7 p34 g j # if retval is 1, stop the main game loop (win)
        p0 p1 j # go to loop start
    P10 # else section
        # print "invalid input"
        p33p40s p849p41s p346p43s p6p44s # set params: (33, 849, <>, 346, 6)
        p38 p2 p1 j P38 # call print()
        p12 p1 j # go to P12


    p0 p1 j

P7 # end game loop

# print success message
p228p40s p2584p41s p352p43s p24p44s # set params: (228, 2584, <>, 352, 24)
p84 p2 p1 j P84 # call print()

P13 # stop
